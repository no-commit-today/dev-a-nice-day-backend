plugins {
	id 'java-library'
	id 'java-test-fixtures'
	id 'org.springframework.boot' apply(false)
	id 'io.spring.dependency-management' apply(false)
	id 'org.asciidoctor.jvm.convert' apply(false)
	id 'io.spring.javaformat' apply(false)
}

allprojects {
	group = "${projectGroup}"
	version = "${applicationVersion}"

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(project.javaVersion)
		}
	}

	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/milestone" }
	}
}


subprojects {

	apply plugin: 'java-library'
	apply plugin: 'java-test-fixtures'
	apply plugin: 'jacoco'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.asciidoctor.jvm.convert'

	bootJar.enabled = false
	jar.enabled = true

	jacoco {
		toolVersion = '0.8.12'
	}

	jacocoTestReport {
		dependsOn test

		reports {
			xml.required = false
			csv.required = false
			html.required = true
		}

		afterEvaluate {
			classDirectories.setFrom(
					files(classDirectories.files.collect {
						fileTree(dir: it, excludes: [
								'**/*Exception',
								'**/*Config',
								'**/*Configuration',
								'**/*Application',
						])
					})
			)
		}

		finalizedBy 'jacocoTestCoverageVerification'
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				enabled = false
				element = "BUNDLE"
				limit {
					counter = "LINE"
					value = "COVEREDRATIO"
					minimum = 0.5
				}
				excludes = [
						'*.*Exception',
						'*.*Config',
						'*.*Configuration',
						'*.*Application',
				]

			}
		}
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	dependencies {
		implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"))
		implementation(platform("io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"))

		implementation("com.google.code.findbugs:jsr305:3.0.2")
		testFixturesImplementation("com.google.code.findbugs:jsr305:3.0.2")

		testImplementation("org.springframework.boot:spring-boot-starter-test")
		testRuntimeOnly("org.junit.platform:junit-platform-launcher")
	}

	test {
		useJUnitPlatform {
			excludeTags('develop', 'restdocs')
		}
		finalizedBy 'jacocoTestReport'
	}

	tasks.register('unitTest', Test) {
		group = 'verification'
		useJUnitPlatform {
			excludeTags('develop', 'context', 'restdocs')
		}
	}

	tasks.register('contextTest', Test) {
		group = 'verification'
		useJUnitPlatform {
			includeTags('context')
		}
	}

	tasks.register('restDocsTest', Test) {
		group = 'verification'
		useJUnitPlatform {
			includeTags('restdocs')
		}
	}

	tasks.register('developTest', Test) {
		group = 'verification'
		useJUnitPlatform {
			includeTags('develop')
		}
	}

	tasks.named('asciidoctor') {
		dependsOn restDocsTest
	}
}
